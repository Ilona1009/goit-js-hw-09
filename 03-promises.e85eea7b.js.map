{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAOF,IALA,IAAgCC,EAAAF,EAAEG,cAAcC,SAAxCC,EAAwBH,EAAxBI,MAAOC,EAAiBL,EAAjBK,KAAMC,EAAWN,EAAXM,OACfC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEzBG,EAAW,EAAGA,GAAYD,EAAaC,GAAY,EACzC,IAAbA,EACFC,EAAcD,EAAUL,GACrBO,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUZ,EAAKW,EAALX,MACjBa,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANhB,EAAM,M,IAEvEiB,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUZ,EAAKW,EAALX,MAClBa,EAAAzB,GAAS0B,OAAOI,QAAQ,sBAAuCF,OAAfJ,EAAS,QAAYI,OAANhB,EAAM,M,IAEpEmB,QAAQ7B,EAAK8B,SAIlBX,EAAcD,EAAUL,EAAaG,GAAaE,EAAW,IAC1DE,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUZ,EAAKW,EAALX,MACjBa,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANhB,EAAM,M,IAEvEiB,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUZ,EAAKW,EAALX,MAClBa,EAAAzB,GAAS0B,OAAOI,QAAQ,OAAsBF,OAAfJ,EAAS,QAAYI,OAANhB,EAAM,M,IAEnDmB,QAAQ7B,EAAK8B,SAMpB,SAASX,EAAcG,EAAUZ,GAC/B,IAAMqB,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEb,WAAUZ,UAEpB0B,EAAO,CAAEd,WAAUZ,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n  \n  const { delay, step, amount } = e.currentTarget.elements;\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let position = 1; position <= amountValue; position += 1) {\n    if (position === 1) {\n      createPromise(position, delayValue )\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n          .finally(form.reset());\n\n    }\n    else {\n      createPromise(position, delayValue + stepValue * (position - 1))\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ gi${position} in ${delay}ms`);\n        })\n          .finally(form.reset());\n\n    }\n\n  }\n\n    function createPromise(position, delay) {\n      const shouldResolve = Math.random() > 0.3;\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (shouldResolve) {\n            resolve({ position, delay });\n          } else {\n            reject({ position, delay });\n          }\n        }, delay);\n      })\n    }\n  }\n\n\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","delayValue","Number","value","stepValue","amountValue","position1","createPromise","then","param","position","$parcel$interopDefault","Notify","success","concat","catch","failure","finally","reset","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.e85eea7b.js.map"}