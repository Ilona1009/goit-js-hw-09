{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAEF,MACEC,UAAYC,MAAAC,EAAKC,KAAEA,EAAIC,OAAEA,IACvBN,EAAEO,cACAC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAElC,IAAKG,SAAW,EAAGA,UAAYD,EAAaC,UAAY,EACrC,IAAbA,SACFC,EAAcD,SAAUL,GACrBO,MAAK,EAACF,SAAEA,EAAQV,MAAEA,MACjBa,EAAAtB,GAASuB,OAAOC,QAAQ,uBAAqBL,QAAiBV,MAAU,IAEzEgB,OAAM,EAACN,SAAEA,EAAQV,MAAEA,MAClBa,EAAAtB,GAASuB,OAAOG,QAAQ,sBAAoBP,QAAiBV,MAAU,IAEtEkB,QAAQzB,EAAK0B,SAIlBR,EAAcD,SAAUL,EAAaG,GAAaE,SAAW,IAC1DE,MAAK,EAACF,SAAEA,EAAQV,MAAEA,MACjBa,EAAAtB,GAASuB,OAAOC,QAAQ,uBAAqBL,QAAiBV,MAAU,IAEzEgB,OAAM,EAACN,SAAEA,EAAQV,MAAEA,MAClBa,EAAAtB,GAASuB,OAAOG,QAAQ,sBAAoBP,QAAeV,MAAU,IAEpEkB,QAAQzB,EAAK0B,SAMpB,SAASR,EAAcD,EAAUV,GAC/B,MAAMoB,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEd,E,MAAUV,IAEpByB,EAAO,C,SAAEf,E,MAAUV,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n  \n  const {\n    elements: { delay, step, amount }\n  } = e.currentTarget;\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (position = 1; position <= amountValue; position += 1) {\n    if (position === 1) {\n      createPromise(position, delayValue )\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n          .finally(form.reset());\n\n    }\n    else {\n      createPromise(position, delayValue + stepValue * (position - 1))\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n          .finally(form.reset());\n\n    }\n\n  }\n\n    function createPromise(position, delay) {\n      const shouldResolve = Math.random() > 0.3;\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (shouldResolve) {\n            resolve({ position, delay });\n          } else {\n            reject({ position, delay });\n          }\n        }, delay);\n      })\n    }\n  }\n\n\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","addEventListener","e","preventDefault","elements","delay","delay1","step","amount","currentTarget","delayValue","Number","value","stepValue","amountValue","position","createPromise","then","$parcel$interopDefault","Notify","success","catch","failure","finally","reset","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.78d8568c.js.map"}